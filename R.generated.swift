//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TableActionCell`.
    static let tableActionCell: Rswift.ReuseIdentifier<TableActionCell> = Rswift.ReuseIdentifier(identifier: "TableActionCell")
    /// Reuse identifier `TableFieldCell`.
    static let tableFieldCell: Rswift.ReuseIdentifier<TableFieldCell> = Rswift.ReuseIdentifier(identifier: "TableFieldCell")
    /// Reuse identifier `TableSeparatorCell`.
    static let tableSeparatorCell: Rswift.ReuseIdentifier<TableSeparatorCell> = Rswift.ReuseIdentifier(identifier: "TableSeparatorCell")
    /// Reuse identifier `TableSimpleCell`.
    static let tableSimpleCell: Rswift.ReuseIdentifier<TableSimpleCell> = Rswift.ReuseIdentifier(identifier: "TableSimpleCell")
    /// Reuse identifier `TableStepperCell`.
    static let tableStepperCell: Rswift.ReuseIdentifier<TableStepperCell> = Rswift.ReuseIdentifier(identifier: "TableStepperCell")
    /// Reuse identifier `TableSwitchCell`.
    static let tableSwitchCell: Rswift.ReuseIdentifier<TableSwitchCell> = Rswift.ReuseIdentifier(identifier: "TableSwitchCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 18 localization keys.
    struct localizable {
      /// en translation: Cancel
      /// 
      /// Locales: en
      static let commonCancel = Rswift.StringResource(key: "Common/Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en
      static let commonConfirm = Rswift.StringResource(key: "Common/Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en
      static let commonContinue = Rswift.StringResource(key: "Common/Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en
      static let commonDone = Rswift.StringResource(key: "Common/Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en
      static let commonError = Rswift.StringResource(key: "Common/Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Finish
      /// 
      /// Locales: en
      static let commonFinish = Rswift.StringResource(key: "Common/Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en
      static let commonNext = Rswift.StringResource(key: "Common/Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en
      static let commonNo = Rswift.StringResource(key: "Common/No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en
      static let commonOk = Rswift.StringResource(key: "Common/Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Previous
      /// 
      /// Locales: en
      static let commonPrevious = Rswift.StringResource(key: "Common/Previous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reset
      /// 
      /// Locales: en
      static let commonReset = Rswift.StringResource(key: "Common/Reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resume
      /// 
      /// Locales: en
      static let commonResume = Rswift.StringResource(key: "Common/Resume", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en
      static let commonSave = Rswift.StringResource(key: "Common/Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Share
      /// 
      /// Locales: en
      static let commonShare = Rswift.StringResource(key: "Common/Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip
      /// 
      /// Locales: en
      static let commonSkip = Rswift.StringResource(key: "Common/Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Something went wrong
      /// 
      /// Locales: en
      static let errorUnknown = Rswift.StringResource(key: "Error/Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stop
      /// 
      /// Locales: en
      static let commonStop = Rswift.StringResource(key: "Common/Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en
      static let commonYes = Rswift.StringResource(key: "Common/Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Cancel
      /// 
      /// Locales: en
      static func commonCancel(_: Void = ()) -> String {
        return NSLocalizedString("Common/Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en
      static func commonConfirm(_: Void = ()) -> String {
        return NSLocalizedString("Common/Confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en
      static func commonContinue(_: Void = ()) -> String {
        return NSLocalizedString("Common/Continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en
      static func commonDone(_: Void = ()) -> String {
        return NSLocalizedString("Common/Done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en
      static func commonError(_: Void = ()) -> String {
        return NSLocalizedString("Common/Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Finish
      /// 
      /// Locales: en
      static func commonFinish(_: Void = ()) -> String {
        return NSLocalizedString("Common/Finish", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en
      static func commonNext(_: Void = ()) -> String {
        return NSLocalizedString("Common/Next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en
      static func commonNo(_: Void = ()) -> String {
        return NSLocalizedString("Common/No", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en
      static func commonOk(_: Void = ()) -> String {
        return NSLocalizedString("Common/Ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Previous
      /// 
      /// Locales: en
      static func commonPrevious(_: Void = ()) -> String {
        return NSLocalizedString("Common/Previous", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset
      /// 
      /// Locales: en
      static func commonReset(_: Void = ()) -> String {
        return NSLocalizedString("Common/Reset", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resume
      /// 
      /// Locales: en
      static func commonResume(_: Void = ()) -> String {
        return NSLocalizedString("Common/Resume", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en
      static func commonSave(_: Void = ()) -> String {
        return NSLocalizedString("Common/Save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share
      /// 
      /// Locales: en
      static func commonShare(_: Void = ()) -> String {
        return NSLocalizedString("Common/Share", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Skip
      /// 
      /// Locales: en
      static func commonSkip(_: Void = ()) -> String {
        return NSLocalizedString("Common/Skip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong
      /// 
      /// Locales: en
      static func errorUnknown(_: Void = ()) -> String {
        return NSLocalizedString("Error/Unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stop
      /// 
      /// Locales: en
      static func commonStop(_: Void = ()) -> String {
        return NSLocalizedString("Common/Stop", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en
      static func commonYes(_: Void = ()) -> String {
        return NSLocalizedString("Common/Yes", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CoreNVC
      
      let bundle = R.hostingBundle
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "Main"
      
      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photo.on.rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo.on.rectangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
